{"version":3,"file":"static/js/881.fa9f3e81.chunk.js","mappings":"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","sources":["webpack://film-flix/./src/components/MovieCard/MovieCard.module.css?a4e5","components/MovieCard/MovieCard.jsx","pages/MovieDetails.jsx","services/themoviedb-api.js","services/utils.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"backdrop\":\"MovieCard_backdrop__XujUC\",\"movieDetContainer\":\"MovieCard_movieDetContainer__soyDn\",\"buttonGoBack\":\"MovieCard_buttonGoBack__P6p6I\",\"container\":\"MovieCard_container__4KN1P\",\"posterContainer\":\"MovieCard_posterContainer__kxlWw\",\"posterLink\":\"MovieCard_posterLink__ILfQh\",\"posterImg\":\"MovieCard_posterImg__ga5JI\",\"posterCountries\":\"MovieCard_posterCountries__2zL+7\",\"descrContainer\":\"MovieCard_descrContainer__USp3o\",\"descrTitle\":\"MovieCard_descrTitle__Vd13S\",\"descrTagline\":\"MovieCard_descrTagline__QbVAE\",\"title\":\"MovieCard_title__mQEBM\",\"descrOverview\":\"MovieCard_descrOverview__pqGjf\",\"descrStatsAndComp\":\"MovieCard_descrStatsAndComp__zywFM\",\"descrStats\":\"MovieCard_descrStats__hg0rt\",\"descrProdComp\":\"MovieCard_descrProdComp__Qk0yK\",\"descrLogo\":\"MovieCard_descrLogo__ndj1H\",\"additionalTitle\":\"MovieCard_additionalTitle__yB578\",\"buttonContainer\":\"MovieCard_buttonContainer__mR3tz\",\"buttonItem\":\"MovieCard_buttonItem__AOMsH\",\"buttonLink\":\"MovieCard_buttonLink__ZcXZe\"};","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ToStringConverter, formatDate, formatPoster } from 'services/utils';\nimport PropTypes from 'prop-types';\nimport css from './MovieCard.module.css';\n\nconst MovieCard = ({ info }) => {\n  const {\n    genres,\n    homepage,\n    original_title,\n    overview,\n    poster_path,\n    production_companies,\n    production_countries,\n    release_date,\n    tagline,\n    title,\n    vote_average,\n    vote_count\n  } = info;\n\n  const productionCompaniesList = production_companies?.map(\n    ({ id, logo_path, name }) =>\n      logo_path && (\n        <li key={id}>\n          {logo_path && (\n            <img\n              className={css.descrLogo}\n              src={`https://image.tmdb.org/t/p/w500${logo_path}`}\n              alt={name}\n              style={{ maxHeight: 50, maxWidth: 200 }}\n            />\n          )}\n        </li>\n      )\n  );\n  // console.log(productionCompaniesList);\n\n  return (\n    <section className={css.container}>\n      <div className={css.posterContainer}>\n        <a className={css.posterLink} rel=\"noopener noreferrer\" target=\"_blank\" href={homepage}>\n          <img\n            className={css.posterImg}\n            src={formatPoster(poster_path)}\n            alt={original_title}\n            loading=\"lazy\"\n            width=\"300\"\n            max-height='709'\n          />\n        </a>\n        <p className={css.posterCountries}>{ToStringConverter(production_countries) !== '' ? ToStringConverter(production_countries) : 'Country information not available'}</p>\n      </div>\n\n      <div className={css.descrContainer}>\n        <div>\n          <div>\n            <h1 className={css.descrTitle}>\n              {title}\n              {release_date && <span> ({release_date.slice(0, 4)})</span>}\n            </h1>\n            <p className={css.descrTagline}>{tagline}</p>\n          </div>\n\n          <div>\n            <h3 className={css.title}>Overview: </h3>\n            <p className={css.descrOverview}>{overview !== '' ? overview : 'Unfortunately, there is no detailed overview available for this movie.'}</p>\n          </div>\n\n          <div>\n            <h3 className={css.title}>Genres: </h3>\n            <p>{ToStringConverter(genres) !== '' ? ToStringConverter(genres) : 'No genres provided'}</p>\n          </div>\n        </div>\n      \n        <div className={css.descrStatsAndComp}>\n          <div>\n            <h3 className={css.title}>Statistics: </h3>\n            <ul className={css.descrStats}>\n              <li>\n                Release Date:\n                <p>{formatDate(release_date)}</p>\n              </li>\n\n              <li>\n                User Score:\n                <p>{Math.round(vote_average * 10)}%&ensp;</p>\n              </li>\n\n              <li>\n                Votes:\n                <p>{vote_count !== '' ? vote_count : 'No votes'}</p>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className={css.title}>Production Companies:</h3>\n            {productionCompaniesList?.length > 0 && <ul className={css.descrProdComp}>{productionCompaniesList}</ul>}\n          </div>\n        </div>\n\n        <div>\n          <h2 className={css.additionalTitle}>Additional Information</h2>\n          <ul className={css.buttonContainer}>\n            <li className={css.buttonItem}>\n              <Link to='cast' className={css.buttonLink}>\n                Cast\n              </Link>\n            </li>\n            <li className={css.buttonItem}>\n              <Link to='reviews' className={css.buttonLink}>\n                Reviews\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nMovieCard.propTypes = {\n  info: PropTypes.shape({\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n      })\n    ),\n    homepage: PropTypes.string,\n    original_title: PropTypes.string,\n    overview: PropTypes.string,\n    poster_path: PropTypes.string,\n    production_companies: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number,\n        logo_path: PropTypes.string,\n        name: PropTypes.string,\n      })\n    ),\n    production_countries: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n      })\n    ),\n    release_date: PropTypes.string,\n    tagline: PropTypes.string,\n    title: PropTypes.string,\n    vote_average: PropTypes.number,\n    vote_count: PropTypes.number,\n  }),\n};\n\nexport default MovieCard;","import React, { Suspense, useEffect, useRef, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport MovieDescription from 'components/MovieCard/MovieCard';\nimport { getMovieDetails } from 'services/themoviedb-api';\nimport Loader from 'components/Loader/Loader';\nimport { formatBGPoster } from 'services/utils';\nimport css from '../components/MovieCard/MovieCard.module.css';\n\nconst MovieDetails = () => {\n  const location = useLocation();\n  const goBackLocationRef = useRef(location.state?.from ?? '/');\n  const [movieInfo, setMovieInfo] = useState({});\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovieDetailsData = async () => {\n      try {\n        const response = await getMovieDetails(movieId);\n        setMovieInfo(response);\n        // console.log(response);\n      } catch (error) {\n        console.error(error.message);\n      }\n    };\n\n    getMovieDetailsData();\n  }, [movieId])\n  \n  const { backdrop_path } = movieInfo;\n  \n  return (\n    <>\n      <article className={css.movieDetContainer}>\n        <Link to={goBackLocationRef.current} className={css.buttonGoBack}>Go back</Link>\n        {<div className={css.backdrop} style={{ backgroundImage: formatBGPoster(backdrop_path) }}></div>}\n        <MovieDescription info={movieInfo} />\n      </article>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'ab7c8e3be151e2a634eb03e6c55db2da';\n\n// список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\n// пошук фільму за ключовим словом на сторінці фільмів.\nexport const searchMovies = async (query) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=1`);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\n// запит повної інформації про фільм для сторінки кінофільму.\nexport const getMovieDetails = async (movieId) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\n// запит інформації про акторський склад для сторінки кінофільму.\nexport const getMovieCredits = async (movieId) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\n    return response.data.cast;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\n// запит оглядів для сторінки кінофільму.\nexport const getMovieReviews = async (movieId) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};","import moment from 'moment';\nimport defaultReviewAuthorImage from '../images/default_review_author.png';\nimport defaultPosterImage from '../images/default_poster.png';\nimport defaultCastImage from '../images/default_cast.png';\nimport defaultBGPoster from '../images/default_background.png';\n\nexport const ratingConvert = rating => Array.from({ length: rating }, () => '✯').join('');\n\nexport const formatDate = date => moment(date).format('DD MMM YYYY');\n\nexport const formatDateTime = dateTime => moment(dateTime).format('DD MMM YYYY HH:mm:ss');\n\nexport const formatAvatar = avatar => {\n  if (!avatar) return defaultReviewAuthorImage;\n\n  const arr = Array.from(avatar);\n  arr.shift();\n  if (arr.length <= 31) return `https://image.tmdb.org/t/p/w500/${arr.join('')}`;\n\n  return arr.join('');\n};\n\nexport const ToStringConverter = obj => obj?.map(elem => elem.name).join(', ');\n\nexport const formatPoster = poster => poster ? `https://image.tmdb.org/t/p/w500${poster}` : defaultPosterImage;\n\nexport const formatFoto = poster => poster ? `https://image.tmdb.org/t/p/w500${poster}` : defaultCastImage;\n\nexport const formatBGPoster = bg => {\n  if (bg === null) return `url(${defaultBGPoster})`;\n  return `url(https://image.tmdb.org/t/p/original/${bg})`;\n};"],"names":["info","genres","homepage","original_title","overview","poster_path","production_companies","production_countries","release_date","tagline","title","vote_average","vote_count","productionCompaniesList","map","id","logo_path","name","className","css","src","alt","style","maxHeight","maxWidth","rel","target","href","formatPoster","loading","width","ToStringConverter","slice","formatDate","Math","round","length","to","location","useLocation","goBackLocationRef","useRef","state","from","useState","movieInfo","setMovieInfo","movieId","useParams","useEffect","getMovieDetailsData","getMovieDetails","response","console","error","message","backdrop_path","current","backgroundImage","formatBGPoster","Suspense","fallback","Loader","BASE_URL","API_KEY","getTrendingMovies","axios","data","Error","searchMovies","query","getMovieCredits","cast","getMovieReviews","results","ratingConvert","rating","Array","join","date","moment","format","formatDateTime","dateTime","formatAvatar","avatar","defaultReviewAuthorImage","arr","shift","obj","elem","poster","defaultPosterImage","formatFoto","bg","defaultBGPoster"],"sourceRoot":""}